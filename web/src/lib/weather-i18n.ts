import type { Lang } from "@/types/language";

function canonical(code: number): number {
  if ([1, 2, 3].includes(code)) return 1; // Cloudy
  if ([45, 48].includes(code)) return 45; // Fog
  if ([51, 53, 55, 56, 57].includes(code)) return 51; // Drizzle
  if ([61, 63, 65, 66, 67].includes(code)) return 61; // Rain
  if ([71, 73, 75, 77].includes(code)) return 71; // Snow
  if ([80, 81, 82].includes(code)) return 80; // Rain showers
  if ([95, 96, 97, 98, 99].includes(code)) return 95; // Thunder
  return code; // 0 clear etc.
}

const DICT: Record<
  number,
  { icon: string; lo: string; gb: string; zh: string }
> = {
  0: { icon: "โ๏ธ", lo: "เปเบเปเบ", gb: "Clear", zh: "ๆด" },
  1: { icon: "โ๏ธ", lo: "เบกเบตเปเบกเบ", gb: "Cloudy", zh: "ๅคไบ" },
  45: { icon: "๐ซ๏ธ", lo: "เปเบญเบ", gb: "Fog", zh: "้พ" },
  51: { icon: "๐ฆ๏ธ", lo: "เบเบปเบเบเบญเบ", gb: "Drizzle", zh: "ๆฏๆฏ้จ" },
  61: { icon: "๐ง๏ธ", lo: "เบเบปเบ", gb: "Rain", zh: "้จ" },
  71: { icon: "๐จ๏ธ", lo: "เบซเบดเบกเบฐ", gb: "Snow", zh: "้ช" },
  80: { icon: "๐ฆ๏ธ", lo: "เบเบปเบเบเบญเบ", gb: "Rain showers", zh: "้ต้จ" },
  95: { icon: "โ๏ธ", lo: "เบเบฒเบเบธเบเปเบฒเบฎเปเบญเบ", gb: "Thunderstorm", zh: "้ทๆด" },
};

export function describeWeather(code: number, lang: Lang) {
  const key = canonical(code);
  const entry = DICT[key] ?? DICT[1];
  const text = lang === "lo" ? entry.lo : lang === "zh" ? entry.zh : entry.gb;
  return { icon: entry.icon, text };
}

export function placeLabel(lang: Lang) {
  if (lang === "lo") return "เบเบปเปเบเปเบเบดเปเบ, เบเปเปเปเบเปเบง, เบฅเบฒเบง";
  // Use English for gb & zh to avoid incorrect transliterations
  return "Ton Pheung, Bokeo, Laos";
}
